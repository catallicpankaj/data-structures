// Need to handle logics to validate the stacks data versus charArr[i] and then pop it.

//Algorithm
/**
* Declare a character stack S.
* Now traverse the expression string exp.
* If the current character is a starting bracket (‘(‘ or ‘{‘ or ‘[‘) then push it to stack.
* If the current character is a closing bracket (‘)’ or ‘}’ or ‘]’) then pop from stack 
* and if the popped character is the matching starting bracket then fine else parenthesis are not balanced.
* After complete traversal, if there is some starting bracket left in stack then “not balanced”
**/
String exp =  "{(()}}";
char charArr[] = exp.toCharArray();
char [] = {'{','(','(',')','}','}'};
for i - > charArr.length;
if (charArr[i] == '{' || charArr [i] == '('){
    Stack.push(charArr[i]);
}
else if(charArr[i] == '}' || charArr [i] == ')') {
    //validate if matching pair.
    Stack.pop(); 

}